// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: pb/tokenSession.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenSessionServiceClient is the client API for TokenSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenSessionServiceClient interface {
	CreateTokenSession(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error)
	GetTokenSession(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error)
}

type tokenSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenSessionServiceClient(cc grpc.ClientConnInterface) TokenSessionServiceClient {
	return &tokenSessionServiceClient{cc}
}

func (c *tokenSessionServiceClient) CreateTokenSession(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error) {
	out := new(CreateRes)
	err := c.cc.Invoke(ctx, "/pb.TokenSessionService/CreateTokenSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenSessionServiceClient) GetTokenSession(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error) {
	out := new(GetRes)
	err := c.cc.Invoke(ctx, "/pb.TokenSessionService/GetTokenSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenSessionServiceServer is the server API for TokenSessionService service.
// All implementations must embed UnimplementedTokenSessionServiceServer
// for forward compatibility
type TokenSessionServiceServer interface {
	CreateTokenSession(context.Context, *CreateReq) (*CreateRes, error)
	GetTokenSession(context.Context, *GetReq) (*GetRes, error)
	mustEmbedUnimplementedTokenSessionServiceServer()
}

// UnimplementedTokenSessionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenSessionServiceServer struct {
}

func (UnimplementedTokenSessionServiceServer) CreateTokenSession(context.Context, *CreateReq) (*CreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTokenSession not implemented")
}
func (UnimplementedTokenSessionServiceServer) GetTokenSession(context.Context, *GetReq) (*GetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenSession not implemented")
}
func (UnimplementedTokenSessionServiceServer) mustEmbedUnimplementedTokenSessionServiceServer() {}

// UnsafeTokenSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenSessionServiceServer will
// result in compilation errors.
type UnsafeTokenSessionServiceServer interface {
	mustEmbedUnimplementedTokenSessionServiceServer()
}

func RegisterTokenSessionServiceServer(s grpc.ServiceRegistrar, srv TokenSessionServiceServer) {
	s.RegisterService(&TokenSessionService_ServiceDesc, srv)
}

func _TokenSessionService_CreateTokenSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenSessionServiceServer).CreateTokenSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenSessionService/CreateTokenSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenSessionServiceServer).CreateTokenSession(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenSessionService_GetTokenSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenSessionServiceServer).GetTokenSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenSessionService/GetTokenSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenSessionServiceServer).GetTokenSession(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenSessionService_ServiceDesc is the grpc.ServiceDesc for TokenSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TokenSessionService",
	HandlerType: (*TokenSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTokenSession",
			Handler:    _TokenSessionService_CreateTokenSession_Handler,
		},
		{
			MethodName: "GetTokenSession",
			Handler:    _TokenSessionService_GetTokenSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/tokenSession.proto",
}
